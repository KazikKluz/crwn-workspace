{"ast":null,"code":"import { all, call, takeLatest, put } from \"redux-saga/effects\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\nimport UserActionTypes from \"./user.types\";\nimport { auth, getCurrentUser, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield put(getSnapshotFromUserAuth(userAuth));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  yield console.log(email + password);\n\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/home/fdiamond/Training/crwn-clothing/src/redux/user/user.sagas.js"],"names":["all","call","takeLatest","put","signInSuccess","signInFailure","UserActionTypes","auth","getCurrentUser","googleProvider","createUserProfileDocument","isUserAuthenticated","userAuth","getSnapshotFromUserAuth","error","onCheckUserSession","CHECK_USER_SESSION","userRef","userSnapshot","get","id","data","signInWithEmail","payload","email","password","console","log","user","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWithGoogle","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,yBAJF,QAKO,+BALP;AAOA,OAAO,UAAUC,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACA,QAAI,CAACI,QAAL,EAAe;AACf,UAAMT,GAAG,CAACU,uBAAuB,CAACD,QAAD,CAAxB,CAAT;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,UAAMX,GAAG,CAACE,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMb,UAAU,CAACI,eAAe,CAACU,kBAAjB,EAAqCL,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUE,uBAAV,CAAkCD,QAAlC,EAA4C;AACjD,MAAI;AACF,UAAMK,OAAO,GAAG,MAAMhB,IAAI,CAACS,yBAAD,EAA4BE,QAA5B,CAA1B;AACA,UAAMM,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMhB,GAAG,CAACC,aAAa,CAAC;AAAEgB,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GAJD,CAIE,OAAOP,KAAP,EAAc;AACd,UAAMX,GAAG,CAACE,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUQ,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,QAAMC,OAAO,CAACC,GAAR,CAAYH,KAAK,GAAGC,QAApB,CAAN;;AACA,MAAI;AACF,UAAM;AAAEG,MAAAA;AAAF,QAAW,MAAMrB,IAAI,CAACsB,0BAAL,CAAgCL,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMZ,uBAAuB,CAACe,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOd,KAAP,EAAc;AACd,UAAMX,GAAG,CAACE,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUgB,kBAAV,GAA+B;AACpC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,mBAAjB,EAAsCT,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUU,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEJ,MAAAA;AAAF,QAAW,MAAMrB,IAAI,CAAC0B,eAAL,CAAqBxB,cAArB,CAAvB;AACA,UAAMI,uBAAuB,CAACe,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOd,KAAP,EAAc;AACd,UAAMX,GAAG,CAACE,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUoB,mBAAV,GAAgC;AACrC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,oBAAjB,EAAuCH,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUI,SAAV,GAAsB;AAC3B,QAAMpC,GAAG,CAAC,CACRC,IAAI,CAACiC,mBAAD,CADI,EAERjC,IAAI,CAAC6B,kBAAD,CAFI,EAGR7B,IAAI,CAACc,kBAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, call, takeLatest, put } from \"redux-saga/effects\";\nimport { signInSuccess, signInFailure } from \"./user.actions\";\n\nimport UserActionTypes from \"./user.types\";\nimport {\n  auth,\n  getCurrentUser,\n  googleProvider,\n  createUserProfileDocument,\n} from \"../../firebase/firebase.utils\";\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield put(getSnapshotFromUserAuth(userAuth));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  yield console.log(email + password);\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}