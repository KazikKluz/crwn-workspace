{"ast":null,"code":"import { all, call, takeLatest, put } from \"redux-saga/effects\";\nimport { UserActionTypes } from \"./user.types\";\nimport { getCurrentUser, auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from \"./user.actions\";\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/home/fdiamond/Training/crwn-clothing/src/redux/user/user.sagas.js"],"names":["all","call","takeLatest","put","UserActionTypes","getCurrentUser","auth","googleProvider","createUserProfileDocument","signInFailure","signInSuccess","isUserAuthenticated","userAuth","error","onCheckUserSession","CHECK_USER_SESSION","getSnapshotFromUserAuth","userRef","userSnapshot","get","id","data","signInWithEmail","payload","email","password","user","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWithGoogle","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,eAAT,QAAgC,cAAhC;AACA,SACEC,cADF,EAEEC,IAFF,EAGEC,cAHF,EAIEC,yBAJF,QAKO,+BALP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMP,cAAc,EAArC;AACA,QAAI,CAACO,QAAL,EAAe;AAChB,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMV,GAAG,CAACM,aAAa,CAACI,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMZ,UAAU,CAACE,eAAe,CAACW,kBAAjB,EAAqCJ,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUK,uBAAV,CAAkCJ,QAAlC,EAA4C;AACjD,MAAI;AACF,UAAMK,OAAO,GAAG,MAAMhB,IAAI,CAACO,yBAAD,EAA4BI,QAA5B,CAA1B;AACA,UAAMM,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMhB,GAAG,CAACO,aAAa,CAAC;AAAEU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GAJD,CAIE,OAAOR,KAAP,EAAc;AACd,UAAMV,GAAG,CAACM,aAAa,CAACI,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUS,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMpB,IAAI,CAACqB,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMT,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOb,KAAP,EAAc;AACd,UAAMV,GAAG,CAACM,aAAa,CAACI,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUe,kBAAV,GAA+B;AACpC,QAAM1B,UAAU,CAACE,eAAe,CAACyB,mBAAjB,EAAsCP,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUQ,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEJ,MAAAA;AAAF,QAAW,MAAMpB,IAAI,CAACyB,eAAL,CAAqBxB,cAArB,CAAvB;AACA,UAAMS,uBAAuB,CAACU,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOb,KAAP,EAAc;AACd,UAAMV,GAAG,CAACM,aAAa,CAACI,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUmB,mBAAV,GAAgC;AACrC,QAAM9B,UAAU,CAACE,eAAe,CAAC6B,oBAAjB,EAAuCH,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUI,SAAV,GAAsB;AAC3B,QAAMlC,GAAG,CAAC,CAACC,IAAI,CAAC+B,mBAAD,CAAL,EAA4B/B,IAAI,CAAC2B,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["import { all, call, takeLatest, put } from \"redux-saga/effects\";\n\nimport { UserActionTypes } from \"./user.types\";\nimport {\n  getCurrentUser,\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n} from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from \"./user.actions\";\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}